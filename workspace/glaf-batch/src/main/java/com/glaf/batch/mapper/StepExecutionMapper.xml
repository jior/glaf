<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.batch.mapper.StepExecutionMapper">

	<resultMap id="stepExecutionResultMap" type="com.glaf.batch.domain.StepExecution">
		<id property="stepExecutionId" column="step_execution_id" jdbcType="BIGINT" />
		<result property="version" column="version" jdbcType="INTEGER" />
		<result property="stepKey" column="step_key" jdbcType="VARCHAR" />
		<result property="stepName" column="step_name" jdbcType="VARCHAR" />
		<result property="jobStepKey" column="job_step_key" jdbcType="VARCHAR" />
		<result property="jobClass" column="job_class" jdbcType="VARCHAR" />
		<result property="jobExecutionId" column="job_execution_id"
			jdbcType="BIGINT" />
		<result property="jobInstanceId" column="job_instance_id"
			jdbcType="BIGINT" />
		<result property="startTime" column="start_time" jdbcType="TIMESTAMP" />
		<result property="endTime" column="end_time" jdbcType="TIMESTAMP" />
		<result property="status" column="status" jdbcType="VARCHAR" />
		<result property="commitCount" column="commit_count" jdbcType="INTEGER" />
		<result property="readCount" column="read_count" jdbcType="INTEGER" />
		<result property="filterCount" column="filter_count" jdbcType="INTEGER" />
		<result property="writeCount" column="write_count" jdbcType="INTEGER" />
		<result property="readSkipCount" column="read_skip_count"
			jdbcType="INTEGER" />
		<result property="writeSkipCount" column="write_skip_count"
			jdbcType="INTEGER" />
		<result property="processSkipCount" column="process_skip_count"
			jdbcType="INTEGER" />
		<result property="rollbackCount" column="rollback_count"
			jdbcType="INTEGER" />
		<result property="listno" column="listno" jdbcType="INTEGER" />
		<result property="exitCode" column="exit_code" jdbcType="VARCHAR" />
		<result property="exitMessage" column="exit_message" jdbcType="VARCHAR" />
		<result property="lastUpdated" column="last_updated" jdbcType="TIMESTAMP" />
	</resultMap>


	<insert id="insertStepExecution" parameterType="com.glaf.batch.domain.StepExecution">
		insert into JOB_STEP_EXECUTION
		<trim prefix="(" suffix=")" suffixOverrides=",">
			step_execution_id
			<if test="version != null">
				,version
			</if>
			<if test="stepKey != null">
				,step_key
			</if>
			<if test="stepName != null">
				,step_name
			</if>
			<if test="jobStepKey != null">
				,job_step_key
			</if>
			<if test="jobClass != null">
				,job_class
			</if>
			<if test="jobExecutionId != null">
				,job_execution_id
			</if>
			<if test="jobInstanceId != null">
				,job_instance_id
			</if>
			<if test="startTime != null">
				,start_time
			</if>
			<if test="endTime != null">
				,end_time
			</if>
			<if test="status != null">
				,status
			</if>
			<if test="commitCount != null">
				,commit_count
			</if>
			<if test="readCount != null">
				,read_count
			</if>
			<if test="filterCount != null">
				,filter_count
			</if>
			<if test="writeCount != null">
				,write_count
			</if>
			<if test="readSkipCount != null">
				,read_skip_count
			</if>
			<if test="writeSkipCount != null">
				,write_skip_count
			</if>
			<if test="processSkipCount != null">
				,process_skip_count
			</if>
			<if test="rollbackCount != null">
				,rollback_count
			</if>
			<if test="listno != null">
				,listno
			</if>
			<if test="exitCode != null">
				,exit_code
			</if>
			<if test="exitMessage != null">
				,exit_message
			</if>
			<if test="lastUpdated != null">
				,last_updated
			</if>
		</trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			#{stepExecutionId, jdbcType=BIGINT}

			<if test="version != null">
				,#{version, jdbcType=INTEGER}
			</if>
			<if test="stepKey != null">
				,#{stepKey, jdbcType=VARCHAR}
			</if>
			<if test="stepName != null">
				,#{stepName, jdbcType=VARCHAR}
			</if>
			<if test="jobStepKey != null">
				,#{jobStepKey, jdbcType=VARCHAR}
			</if>
			<if test="jobClass != null">
				,#{jobClass, jdbcType=VARCHAR}
			</if>
			<if test="jobExecutionId != null">
				,#{jobExecutionId, jdbcType=BIGINT}
			</if>
			<if test="jobInstanceId != null">
				,#{jobInstanceId, jdbcType=BIGINT}
			</if>
			<if test="startTime != null">
				,#{startTime, jdbcType=TIMESTAMP}
			</if>
			<if test="endTime != null">
				,#{endTime, jdbcType=TIMESTAMP}
			</if>
			<if test="status != null">
				,#{status, jdbcType=VARCHAR}
			</if>
			<if test="commitCount != null">
				,#{commitCount, jdbcType=INTEGER}
			</if>
			<if test="readCount != null">
				,#{readCount, jdbcType=INTEGER}
			</if>
			<if test="filterCount != null">
				,#{filterCount, jdbcType=INTEGER}
			</if>
			<if test="writeCount != null">
				,#{writeCount, jdbcType=INTEGER}
			</if>
			<if test="readSkipCount != null">
				,#{readSkipCount, jdbcType=INTEGER}
			</if>
			<if test="writeSkipCount != null">
				,#{writeSkipCount, jdbcType=INTEGER}
			</if>
			<if test="processSkipCount != null">
				,#{processSkipCount, jdbcType=INTEGER}
			</if>
			<if test="rollbackCount != null">
				,#{rollbackCount, jdbcType=INTEGER}
			</if>
			<if test="listno != null">
				,#{listno, jdbcType=INTEGER}
			</if>
			<if test="exitCode != null">
				,#{exitCode, jdbcType=VARCHAR}
			</if>
			<if test="exitMessage != null">
				,#{exitMessage, jdbcType=VARCHAR}
			</if>
			<if test="lastUpdated != null">
				,#{lastUpdated, jdbcType=TIMESTAMP}
			</if>
		</trim>
	</insert>


	<update id="updateStepExecution" parameterType="com.glaf.batch.domain.StepExecution">
		update
		JOB_STEP_EXECUTION
		set
		<trim prefix="" suffix="" suffixOverrides=",">
			<if test="stepName != null">
				step_name = #{stepName, jdbcType=VARCHAR},
			</if>
			<if test="startTime != null">
				start_time = #{startTime, jdbcType=TIMESTAMP},
			</if>
			<if test="endTime != null">
				end_time = #{endTime, jdbcType=TIMESTAMP},
			</if>
			<if test="status != null">
				status = #{status, jdbcType=VARCHAR},
			</if>
			<if test="commitCount != null">
				commit_count = #{commitCount, jdbcType=INTEGER},
			</if>
			<if test="readCount != null">
				read_count = #{readCount, jdbcType=INTEGER},
			</if>
			<if test="filterCount != null">
				filter_count = #{filterCount, jdbcType=INTEGER},
			</if>
			<if test="writeCount != null">
				write_count = #{writeCount, jdbcType=INTEGER},
			</if>
			<if test="readSkipCount != null">
				read_skip_count = #{readSkipCount, jdbcType=INTEGER},
			</if>
			<if test="writeSkipCount != null">
				write_skip_count = #{writeSkipCount, jdbcType=INTEGER},
			</if>
			<if test="processSkipCount != null">
				process_skip_count = #{processSkipCount,
				jdbcType=INTEGER},
			</if>
			<if test="rollbackCount != null">
				rollback_count = #{rollbackCount, jdbcType=INTEGER},
			</if>
			<if test="exitCode != null">
				exit_code = #{exitCode, jdbcType=VARCHAR},
			</if>
			<if test="exitMessage != null">
				exit_message = #{exitMessage, jdbcType=VARCHAR},
			</if>
			<if test="lastUpdated != null">
				last_updated = #{lastUpdated, jdbcType=TIMESTAMP},
			</if>
		</trim>
		where
		step_execution_id = #{stepExecutionId, jdbcType=BIGINT}

	</update>


	<delete id="deleteStepExecutionById" parameterType="long">
		delete from
		JOB_STEP_EXECUTION
		where step_execution_id = #{id}
	</delete>


	<delete id="deleteStepExecutionByJobInstanceId" parameterType="long">

		delete from JOB_STEP_EXECUTION
		where exists (
		select job_execution_id
		from JOB_EXECUTION
		where job_instance_id = #{jobInstanceId}
		)

	</delete>


	<select id="getStepExecutionById" parameterType="long"
		resultMap="stepExecutionResultMap">
		select * from JOB_STEP_EXECUTION where step_execution_id =
		#{id}
	</select>


	<select id="getStepExecutionByKey" parameterType="string"
		resultMap="stepExecutionResultMap">
		select * from JOB_STEP_EXECUTION where job_step_key =
		#{jobStepKey}
	</select>


	<select id="getStepExecutionsByJobInstanceId" parameterType="long"
		resultMap="stepExecutionResultMap">

		select S.* from JOB_STEP_EXECUTION S
		inner join
		JOB_EXECUTION E
		on
		S.job_execution_id = E.job_execution_id
		where
		E.job_instance_id =
		#{jobInstanceId}
		order by S.listno asc

	</select>


	<select id="getStepExecutionCountBy" parameterType="java.util.HashMap"
		resultType="int">
		select count(*)
		<include refid="selectStepExecutionsSql" />
	</select>


	<select id="getStepExecutionCountByQueryCriteria" parameterType="com.glaf.batch.query.StepExecutionQuery"
		resultType="int">
		select count(*)
		<include refid="selectStepExecutionsSql" />
	</select>


	<select id="getStepExecutions" parameterType="java.util.HashMap"
		resultMap="stepExecutionResultMap">
		select E.*
		<include refid="selectStepExecutionsSql" />
		<if test="orderBy != null">
			order by ${orderBy}
		</if>
	</select>


	<select id="getStepExecutionsByQueryCriteria" parameterType="com.glaf.batch.query.StepExecutionQuery"
		resultMap="stepExecutionResultMap">
		select E.*
		<include refid="selectStepExecutionsSql" />
		<if test="orderBy != null">
			order by ${orderBy}
		</if>
	</select>


	<sql id="selectStepExecutionsSql">

		from JOB_STEP_EXECUTION E

		<where>

			1 = 1

			<if test="stepNameLike != null and stepNameLike != '' ">
				and E.step_name like #{stepNameLike}
			</if>

			<if test="jobInstanceId != null">
				and E.job_instance_id = #{jobInstanceId}
			</if>

			<if test="jobExecutionId != null">
				and E.job_execution_id = #{jobExecutionId}
			</if>

			<if test="jobExecutionIds != null and jobExecutionIds.size != 0">
				and E.job_execution_id IN
				<foreach item="x_jobExecutionId" index="index" collection="jobExecutionIds"
					open="(" separator="," close=")">
					#{x_jobExecutionId}
				</foreach>
			</if>

			<if test="startTimeGreaterThanOrEqual != null">
				and E.start_time &gt;= #{startTimeGreaterThanOrEqual}
			</if>

			<if test="startTimeLessThanOrEqual != null">
				and E.start_time &lt;= #{startTimeLessThanOrEqual}
			</if>

			<if test="endTimeGreaterThanOrEqual != null">
				and E.end_time &gt;= #{endTimeGreaterThanOrEqual}
			</if>

			<if test="endTimeLessThanOrEqual != null">
				and E.end_time &lt;= #{endTimeLessThanOrEqual}
			</if>

			<if test="status != null and status != '' ">
				and E.status = #{status}
			</if>

			<if test="lastUpdatedGreaterThanOrEqual != null">
				and E.last_updated &gt;= #{lastUpdatedGreaterThanOrEqual}
			</if>

			<if test="lastUpdatedLessThanOrEqual != null">
				and E.last_updated &lt;= #{lastUpdatedLessThanOrEqual}
			</if>

		</where>
	</sql>

</mapper>