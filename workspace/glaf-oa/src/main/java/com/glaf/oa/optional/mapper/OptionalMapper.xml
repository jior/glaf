<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.oa.optional.mapper.OptionalMapper">

 	<resultMap id="optionalResultMap"	type="com.glaf.oa.optional.model.Optional">
        <id property="optionalId" column="OPTIONALID" jdbcType="INTEGER" />
        <result property="id" column="ID" jdbcType="INTEGER"/>
        <result property="code" column="CODE" jdbcType="VARCHAR"/>
        <result property="price" column="PRICE" jdbcType="VARCHAR"/>
        <result property="remark" column="REMARK" jdbcType="VARCHAR"/>
        <result property="createBy" column="createBy" jdbcType="VARCHAR"/>
        <result property="createDate" column="createDate" jdbcType="TIMESTAMP"/>
        <result property="updateDate" column="updateDate" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="updateBy" jdbcType="VARCHAR"/>
	</resultMap>

 
	<insert id="insertOptional" parameterType="com.glaf.oa.optional.model.Optional">
		insert into OA_OPTIONAL 
		<trim prefix="(" suffix=")" suffixOverrides=",">
		    OPTIONALID
			<if test="id != null">
				,ID 
			</if>
			<if test="code != null">
				,CODE 
			</if>
			<if test="price != null">
				,PRICE 
			</if>
			<if test="remark != null">
				,REMARK 
			</if>
			<if test="createBy != null">
				,createBy 
			</if>
			<if test="createDate != null">
				,createDate 
			</if>
			<if test="updateDate != null">
				,updateDate 
			</if>
			<if test="updateBy != null">
				,updateBy 
			</if>
        </trim>

		<trim prefix=" values (" suffix=")" suffixOverrides=",">
			  #{optionalId, jdbcType=INTEGER}
	     
			<if test="id != null">
				,#{id, jdbcType=INTEGER}
			</if>
			<if test="code != null">
				,#{code, jdbcType=VARCHAR}
			</if>
			<if test="price != null">
				,#{price, jdbcType=VARCHAR}
			</if>
			<if test="remark != null">
				,#{remark, jdbcType=VARCHAR}
			</if>
			<if test="createBy != null">
				,#{createBy, jdbcType=VARCHAR}
			</if>
			<if test="createDate != null">
				,#{createDate, jdbcType=TIMESTAMP}
			</if>
			<if test="updateDate != null">
				,#{updateDate, jdbcType=TIMESTAMP}
			</if>
			<if test="updateBy != null">
				,#{updateBy, jdbcType=VARCHAR}
			</if>
	    </trim>
    </insert>

	 
	<update id="updateOptional" parameterType="com.glaf.oa.optional.model.Optional">
		update OA_OPTIONAL
		set
        <trim prefix="" suffix="" suffixOverrides=",">		
			<if test="id != null">
				ID = #{id, jdbcType=INTEGER},
			</if>
			<if test="code != null">
				CODE = #{code, jdbcType=VARCHAR},
			</if>
			<if test="price != null">
				PRICE = #{price, jdbcType=VARCHAR},
			</if>
			<if test="remark != null">
				REMARK = #{remark, jdbcType=VARCHAR},
			</if>
			<if test="createBy != null">
				createBy = #{createBy, jdbcType=VARCHAR},
			</if>
			<if test="createDate != null">
				createDate = #{createDate, jdbcType=TIMESTAMP},
			</if>
			<if test="updateDate != null">
				updateDate = #{updateDate, jdbcType=TIMESTAMP},
			</if>
			<if test="updateBy != null">
				updateBy = #{updateBy, jdbcType=VARCHAR},
			</if>
        </trim>
		where
          OPTIONALID = #{optionalId, jdbcType=INTEGER}
		
    </update>

 
	<delete id="deleteOptionalById" parameterType="integer"> 
        delete from OA_OPTIONAL
        where OPTIONALID =	#{id}
	</delete>

	
	<delete id="deleteOptionals" parameterType="com.glaf.oa.optional.query.OptionalQuery">
		delete from OA_OPTIONAL
		where ( 
 			  OPTIONALID IN
              <foreach item="x_optionalId" index="index" collection="optionalIds" 
                     open="(" separator="," close=")">
                  #{x_optionalId}
              </foreach>
		)
	</delete>


	<select id="getOptionalById" parameterType="integer" resultMap="optionalResultMap">
		select * from OA_OPTIONAL where OPTIONALID = #{id}
	</select>


	<select id="getOptionals" 
	    parameterType="com.glaf.oa.optional.query.OptionalQuery"
		resultMap="optionalResultMap">
		select E.*
		<include refid="selectOptionalsSql" />
		<choose>
		  <when test="orderBy != null">
		     order by ${orderBy}
          </when>
		  <otherwise>
		      order by E.OPTIONALID desc
		  </otherwise>
        </choose>
	</select>


	<select id="getOptionalCount" 
	    parameterType="com.glaf.oa.optional.query.OptionalQuery"
		resultType="int">
		select count(*)
		<include refid="selectOptionalsSql" />
	</select>


	<sql id="selectOptionalsSql">

		from OA_OPTIONAL E
		
		 
		<where>
		       1 = 1  


			<if test="id != null">
				and E.ID = #{id}
            </if>

			<if test="idGreaterThanOrEqual != null">
				and E.ID &gt;= #{idGreaterThanOrEqual}
            </if>

			<if test="idLessThanOrEqual != null">
				and E.ID &lt;= #{idLessThanOrEqual}
            </if>

			<if test="ids != null and ids.size != 0">
			    and E.ID IN
                <foreach item="x_id" index="index" collection="ids" 
                     open="(" separator="," close=")">
                  #{x_id}
                </foreach>
			</if>

	        
			<if test="code != null and code != '' ">
				and E.CODE = #{code}
            </if>

			<if test="codeLike != null and codeLike != '' ">
				and E.CODE like #{codeLike}
            </if>

			<if test="codes != null and codes.size != 0">
			    and E.CODE IN
                <foreach item="x_code" index="index" collection="codes" 
                     open="(" separator="," close=")">
                  #{x_code}
                </foreach>
			</if>
	        
			<if test="price != null and price != '' ">
				and E.PRICE = #{price}
            </if>

			<if test="priceLike != null and priceLike != '' ">
				and E.PRICE like #{priceLike}
            </if>

			<if test="prices != null and prices.size != 0">
			    and E.PRICE IN
                <foreach item="x_price" index="index" collection="prices" 
                     open="(" separator="," close=")">
                  #{x_price}
                </foreach>
			</if>
	        
			<if test="remark != null and remark != '' ">
				and E.REMARK = #{remark}
            </if>

			<if test="remarkLike != null and remarkLike != '' ">
				and E.REMARK like #{remarkLike}
            </if>

			<if test="remarks != null and remarks.size != 0">
			    and E.REMARK IN
                <foreach item="x_remark" index="index" collection="remarks" 
                     open="(" separator="," close=")">
                  #{x_remark}
                </foreach>
			</if>
	        
			<if test="createBy != null and createBy != '' ">
				and E.createBy = #{createBy}
            </if>

			<if test="createByLike != null and createByLike != '' ">
				and E.createBy like #{createByLike}
            </if>

			<if test="createBys != null and createBys.size != 0">
			    and E.createBy IN
                <foreach item="x_createBy" index="index" collection="createBys" 
                     open="(" separator="," close=")">
                  #{x_createBy}
                </foreach>
			</if>

			<if test="createDate != null">
				and E.createDate = #{createDate}
            </if>

			<if test="createDateGreaterThanOrEqual != null">
				and E.createDate &gt;= #{createDateGreaterThanOrEqual}
            </if>

			<if test="createDateLessThanOrEqual != null">
				and E.createDate &lt;= #{createDateLessThanOrEqual}
            </if>

			<if test="createDates != null and createDates.size != 0">
			    and E.createDate IN
                <foreach item="x_createDate" index="index" collection="createDates" 
                     open="(" separator="," close=")">
                  #{x_createDate}
                </foreach>
			</if>


			<if test="updateDate != null">
				and E.updateDate = #{updateDate}
            </if>

			<if test="updateDateGreaterThanOrEqual != null">
				and E.updateDate &gt;= #{updateDateGreaterThanOrEqual}
            </if>

			<if test="updateDateLessThanOrEqual != null">
				and E.updateDate &lt;= #{updateDateLessThanOrEqual}
            </if>

			<if test="updateDates != null and updateDates.size != 0">
			    and E.updateDate IN
                <foreach item="x_updateDate" index="index" collection="updateDates" 
                     open="(" separator="," close=")">
                  #{x_updateDate}
                </foreach>
			</if>

	        
			<if test="updateBy != null and updateBy != '' ">
				and E.updateBy = #{updateBy}
            </if>

			<if test="updateByLike != null and updateByLike != '' ">
				and E.updateBy like #{updateByLike}
            </if>

			<if test="updateBys != null and updateBys.size != 0">
			    and E.updateBy IN
                <foreach item="x_updateBy" index="index" collection="updateBys" 
                     open="(" separator="," close=")">
                  #{x_updateBy}
                </foreach>
			</if>
			 
		</where>
	</sql>

</mapper>