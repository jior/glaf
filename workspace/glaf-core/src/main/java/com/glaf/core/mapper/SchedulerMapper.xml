<?xml version="1.0" encoding="UTF-8" ?> 

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.glaf.core.mapper.SchedulerMapper">

	<resultMap id="schedulerResultMap" type="com.glaf.core.domain.SchedulerEntity">
		<id property="id" column="id" jdbcType="VARCHAR" />
		<result property="taskName" column="taskName" jdbcType="VARCHAR" />
		<result property="taskType" column="taskType" jdbcType="VARCHAR" />
		<result property="jobClass" column="jobClass" jdbcType="VARCHAR" />
		<result property="title" column="title" jdbcType="VARCHAR" />
		<result property="content" column="content" jdbcType="VARCHAR" />
		<result property="startDate" column="startDate" jdbcType="TIMESTAMP" />
		<result property="endDate" column="endDate" jdbcType="TIMESTAMP" />
		<result property="threadSize" column="threadSize" jdbcType="INTEGER" />
		<result property="repeatCount" column="repeatCount" jdbcType="INTEGER" />
		<result property="repeatInterval" column="repeatInterval"
			jdbcType="INTEGER" />
		<result property="startDelay" column="startDelay" jdbcType="INTEGER" />
		<result property="priority" column="priority_" jdbcType="INTEGER" />
		<result property="locked" column="locked_" jdbcType="INTEGER" />
		<result property="startup" column="startup_" jdbcType="INTEGER" />
		<result property="autoStartup" column="autoStartup" jdbcType="INTEGER" />
		<result property="expression" column="expression_" jdbcType="VARCHAR" />
		<result property="attribute" column="attribute_" jdbcType="VARCHAR" />
		<result property="createBy" column="createBy" jdbcType="VARCHAR" />
		<result property="createDate" column="createDate" jdbcType="TIMESTAMP" />
	</resultMap>


	<insert id="insertScheduler" parameterType="com.glaf.core.domain.SchedulerEntity">
		insert into
		SYS_SCHEDULER ( id
		,taskName
		,taskType
		,jobClass
		,title
		,content
		,startDate
		,endDate
		,threadSize
		,repeatCount
		,repeatInterval
		,startDelay
		,priority_
		,locked_
		,startup_
		,autoStartup
		,expression_
		,attribute_
		,createBy
		,createDate
		)
		values (
		#{id, jdbcType=VARCHAR}
		,#{taskId, jdbcType=VARCHAR}
		,#{taskName, jdbcType=VARCHAR}
		,#{taskType, jdbcType=VARCHAR}
		,#{jobClass, jdbcType=VARCHAR}
		,#{title, jdbcType=VARCHAR}
		,#{content, jdbcType=VARCHAR}
		,#{startDate, jdbcType=TIMESTAMP}
		,#{endDate, jdbcType=TIMESTAMP}
		,#{threadSize, jdbcType=INTEGER}
		,#{repeatCount, jdbcType=INTEGER}
		,#{repeatInterval, jdbcType=INTEGER}
		,#{startDelay, jdbcType=INTEGER}
		,#{priority, jdbcType=INTEGER}
		,#{locked, jdbcType=INTEGER}
		,#{startup, jdbcType=INTEGER}
		,#{autoStartup, jdbcType=INTEGER}
		,#{expression, jdbcType=VARCHAR}
		,#{attribute, jdbcType=VARCHAR}
		,#{createBy, jdbcType=VARCHAR}
		,#{createDate, jdbcType=TIMESTAMP}
		)
    </insert>


	<update id="updateScheduler" parameterType="com.glaf.core.domain.SchedulerEntity">
		update
		SYS_SCHEDULER
		set taskName = #{taskName, jdbcType=VARCHAR},
		taskType = #{taskType, jdbcType=VARCHAR},
		jobClass = #{jobClass, jdbcType=VARCHAR},
		title = #{title, jdbcType=VARCHAR},
		content = #{content, jdbcType=VARCHAR},
		startDate = #{startDate, jdbcType=TIMESTAMP},
		endDate = #{endDate, jdbcType=TIMESTAMP},
		repeatCount = #{repeatCount, jdbcType=INTEGER},
		repeatInterval = #{repeatInterval, jdbcType=INTEGER},
		startDelay = #{startDelay, jdbcType=INTEGER},
		priority_ = #{priority, jdbcType=INTEGER},
		locked_ = #{locked, jdbcType=INTEGER},
		startup_ = #{startup, jdbcType=INTEGER},
		autoStartup = #{autoStartup, jdbcType=INTEGER},
		expression_ = #{expression, jdbcType=VARCHAR},
		attribute_ = #{attribute, jdbcType=VARCHAR}
		where id = #{id, jdbcType=VARCHAR}
	</update>


	<delete id="deleteSchedulerById" parameterType="string">
		delete from SYS_SCHEDULER
		where id = #{id}
	</delete>

	<delete id="deleteSchedulerByTaskId" parameterType="string">
		delete from SYS_SCHEDULER
		where id = #{taskId}
	</delete>

	<delete id="deleteSchedulers" parameterType="com.glaf.core.query.SchedulerQuery">
		delete from SYS_SCHEDULER
		where (
		id IN
		<foreach item="x_rowId" index="index" collection="rowIds"
			open="(" separator="," close=")">
			#{x_rowId}
              </foreach>
		)
	</delete>

	<select id="getSchedulerById" parameterType="string" resultMap="schedulerResultMap">
		select * from SYS_SCHEDULER where id = #{id}
	</select>

	<select id="getSchedulerByTaskId" parameterType="string"
		resultMap="schedulerResultMap">
		select * from SYS_SCHEDULER where id = #{taskId}
	</select>

	<select id="getSchedulers" parameterType="com.glaf.core.query.SchedulerQuery"
		resultMap="schedulerResultMap">
		
		select E.*
		
		<include refid="selectSchedulersSql" />
		
		<choose>
		  <when test="orderBy != null">
		     order by ${orderBy}
		  </when>
		  <otherwise>
		     order by E.createDate desc
		  </otherwise>
		</choose>
		
        
	</select>

	<select id="getSchedulerCount" parameterType="com.glaf.core.query.SchedulerQuery"
		resultType="int">
		select count(*)
		<include refid="selectSchedulersSql" />
	</select>

	<sql id="selectSchedulersSql">

		from SYS_SCHEDULER E

		<where>
			1 = 1

			<if test="taskId != null">
				and E.id = #{taskId}
            </if>

			<if test="taskIds != null and taskIds.size() &gt; 0">
				and E.id IN
				<foreach item="x_taskId" index="index" collection="taskIds"
					open="(" separator="," close=")">
					#{x_taskId}
                </foreach>
			</if>

			<if test="taskNameLike != null">
				and E.taskName like #{taskNameLike}
            </if>

			<if test="taskType != null">
				and E.taskType = #{taskType}
            </if>

			<if test="jobClassLike != null">
				and E.jobClass like #{jobClassLike}
            </if>

			<if test="titleLike != null">
				and E.title like #{titleLike}
            </if>

			<if test="contentLike != null">
				and E.content like #{contentLike}
            </if>

			<if test="startDateGreaterThanOrEqual != null">
				and E.startDate &gt;= #{startDateGreaterThanOrEqual}
			</if>

			<if test="startDateLessThanOrEqual != null">
				and E.startDate &lt;= #{startDateLessThanOrEqual}
            </if>

			<if test="endDateGreaterThanOrEqual != null">
				and E.endDate &gt;= #{endDateGreaterThanOrEqual}
            </if>

			<if test="endDateLessThanOrEqual != null">
				and E.endDate &lt;= #{endDateLessThanOrEqual}
            </if>

			<if test="locked != null">
				and E.locked_ = #{locked}
            </if>

			<if test="createBy != null">
				and E.createBy = #{createBy}
            </if>

			<if test="afterCreateDate != null">
				and E.createDate &gt;= #{afterCreateDate}
			</if>

			<if test="beforeCreateDate != null">
				and E.createDate &lt;= #{beforeCreateDate}
            </if>

		</where>
	</sql>

</mapper>